// <auto-generated />
using System;
using Conference.Database.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conference.Migrations
{
    [DbContext(typeof(EntityFrameworkContext))]
    [Migration("20230511042116_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Conference.Domain.Decision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("Conference.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Conference.Domain.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("HasCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("VotingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Conference.Domain.MeetingMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("MemberId");

                    b.ToTable("MeetingMembers");
                });

            modelBuilder.Entity("Conference.Domain.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Conference.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Conference.Domain.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Conference.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Conference.Domain.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("OptionId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Conference.Domain.Decision", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", null)
                        .WithMany("Decisions")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Conference.Domain.Document", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", null)
                        .WithMany("Documents")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Conference.Domain.MeetingMember", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", "Meeting")
                        .WithMany("MeetingMembers")
                        .HasForeignKey("MeetingId");

                    b.HasOne("Conference.Domain.Member", "Member")
                        .WithMany("MeetingMembers")
                        .HasForeignKey("MemberId");

                    b.Navigation("Meeting");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Conference.Domain.Note", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", null)
                        .WithMany("Notes")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Conference.Domain.Option", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", null)
                        .WithMany("Options")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Conference.Domain.Question", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", null)
                        .WithMany("Questions")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Conference.Domain.Vote", b =>
                {
                    b.HasOne("Conference.Domain.Meeting", null)
                        .WithMany("Votes")
                        .HasForeignKey("MeetingId");

                    b.HasOne("Conference.Domain.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Conference.Domain.Meeting", b =>
                {
                    b.Navigation("Decisions");

                    b.Navigation("Documents");

                    b.Navigation("MeetingMembers");

                    b.Navigation("Notes");

                    b.Navigation("Options");

                    b.Navigation("Questions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Conference.Domain.Member", b =>
                {
                    b.Navigation("MeetingMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
